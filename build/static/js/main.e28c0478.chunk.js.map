{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","users","setUsers","username","setUsername","email","setEmail","dataUpdated","setDataUpdated","update","setUpdate","endPoint","setEndPoint","useEffect","fetch","then","res","json","data","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","className","onSubmit","e","preventDefault","csrftoken","newUser","console","log","url","httpMethod","method","headers","body","JSON","stringify","response","htmlFor","onChange","target","value","type","id","map","user","key","onClick","handleEdit","handleDelete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e28c0478.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [dataUpdated, setDataUpdated] = useState(false);\n  const [update, setUpdate] = useState(false);\n  const [endPoint, setEndPoint] = useState(\"/users/\");\n\n  useEffect(() => {\n    fetch(\"/users/\")\n      .then((res) => res.json())\n      .then((data) => {\n        setUsers(data);\n        setDataUpdated(false);\n      });\n  }, [dataUpdated]);\n\n  // we need to create CSRG token to be able to submit data to Django with no error\n  const getCookie = (name) => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      const cookies = document.cookie.split(\";\");\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === name + \"=\") {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  };\n\n  const handleChangeUser = (e) => {\n    setUsername(e.target.value);\n  };\n\n  const handleChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const csrftoken = getCookie(\"csrftoken\");\n\n    let newUser = {\n      username,\n      email,\n    };\n    setUsername(\"\");\n    setEmail(\"\");\n    console.log(newUser);\n\n    let url = \"/users/\";\n    let httpMethod = \"POST\";\n\n    if (update) {\n      url = endPoint;\n      httpMethod = \"PUT\";\n      setUpdate(false);\n    }\n\n    fetch(url, {\n      method: httpMethod,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify(newUser),\n    })\n      .then((response) => response.json())\n      .then((data) => setDataUpdated(true));\n  };\n\n  const handleEdit = ({ url, username, email }) => {\n    setUsername(username);\n    setEmail(email);\n    setUpdate(true);\n    setEndPoint(url);\n    console.log(username, email, url);\n  };\n\n  const handleDelete = ({ url }) => {\n    const csrftoken = getCookie(\"csrftoken\");\n    fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n    }).then((data) => setDataUpdated(true));\n  };\n\n  return (\n    <div className=\"App container row mx-auto\">\n      <form className=\"col-12 col-md-4\" onSubmit={handleSubmit}>\n        <h4>New User</h4>\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">User name</label>\n          <input\n            name=\"username\"\n            onChange={handleChangeUser}\n            type=\"text\"\n            className=\"form-control\"\n            id=\"username\"\n            value={username}\n          />\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            name=\"email\"\n            onChange={handleChangeEmail}\n            type=\"email\"\n            className=\"form-control\"\n            id=\"email\"\n            value={email}\n          />\n          <button type=\"submit \" className=\"mt-4 btn btn-success\">\n            Save\n          </button>\n        </div>\n      </form>\n      <div className=\"col-12 offset-md-2 col-md-6 list-items\">\n      <h4>Users list</h4>\n        {users.map((user) => (\n          <div className=\"row items\" key={user.email}>\n            <div className=\"col-12 col-md-5\">\n              <p>{user.username}</p>\n            </div>\n            <div className=\"col-6  col-md-3\">\n              <button\n                onClick={() => handleEdit(user)}\n                className=\"btn btn-primary btn-sm\"\n              >\n                Edit\n              </button>\n            </div>\n            <div className=\"col-6  col-md-3 \">\n              <button\n                onClick={() => handleDelete(user)}\n                className=\"btn btn-danger btn-sm\"\n              >\n                -\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}